# To build a container, you will use the docker build command
# https://docs.docker.com/engine/reference/commandline/build/
#
#   docker build -t <IMAGE TAG> -f Dockerfile.serving .
#   docker build -t <IMAGE TAG> -f Dockerfile.jupyter .
#


# https://docs.docker.com/engine/reference/builder/#from
# You shouldn't need to change this
FROM python:3.7

# https://docs.docker.com/engine/reference/builder/#workdir
# Create and cd into /code as your working directory
WORKDIR /code
COPY /ift6758/requirements.txt .
COPY /ift6758 .
COPY /serving/app.py .
COPY streamlit.py .
COPY utils.py .
COPY /ift6758/ift6758/client/Tidy_Data_new.py .
COPY /ift6758/ift6758/client/game_client.py .
COPY /ift6758/ift6758/client/serving_client.py .

# The main docker commands you will find useful:
# 
# Add a file or directory
# https://docs.docker.com/engine/reference/builder/#add
#
#       ADD ./<SOURCE_DIR/FILE> ./<DOCKER_DIR/FILE>
#
# Run a shell command (tip: chain shell commands with && rather than multiple RUN commands)
# https://docs.docker.com/engine/reference/builder/#run
#
#       RUN <SHELL COMMAND>   
#
RUN pip install --upgrade pip

RUN pip install -r requirements.txt
RUN pip install xgboost
RUN pip install streamlit
# Set an environment variable:
# https://docs.docker.com/engine/reference/builder/#env
#
#       ENV <ENV_VAR>=<DEFAULT>
#
# Expose a port
EXPOSE 8080
# https://docs.docker.com/engine/reference/builder/#port
#
#       EXPOSE <PORT>
#
# Provide default command for executing container
# https://docs.docker.com/engine/reference/builder/#cmd
#
#       CMD <SHELL COMMAND>

ENTRYPOINT ["streamlit", "run", "streamlit.py", "--server.port=8080", "--server.address=0.0.0.0"]

# TODO: add code, optionally a default model if you want 


# TODO: install libs


# TODO: expose ports (or do this in docker-compose)


# TODO: specify default command - this is not required because you can always specify the command
# either with the docker run command or in the docker-compose file
